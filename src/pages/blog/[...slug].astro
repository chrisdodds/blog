---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const posts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: {
      post,
      prevPost: index < posts.length - 1 ? posts[index + 1] : null,
      nextPost: index > 0 ? posts[index - 1] : null,
    },
  }));
}

const { post, prevPost, nextPost } = Astro.props;
const { Content } = await post.render();

const ogImage = `/og/${post.slug}.png`;

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: post.data.title,
  description: post.data.description,
  datePublished: post.data.pubDate.toISOString(),
  author: {
    "@type": "Person",
    name: "Chris Dodds",
  },
  publisher: {
    "@type": "Person",
    name: "Chris Dodds",
  },
  image: `https://chrisdodds.net${ogImage}`,
};
---

<Layout
  title={`${post.data.title} - Chris Dodds`}
  description={post.data.description}
  image={ogImage}
>
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
  <main>
    <article>
      <header>
        <a href="/" class="back">← Back</a>
        <time datetime={post.data.pubDate.toISOString()}>
          {
            post.data.pubDate.toLocaleDateString("en-us", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })
          }
        </time>
        <h1>{post.data.title}</h1>
        <p class="description">{post.data.description}</p>
        {
          post.data.tags && (
            <div class="tags">
              {post.data.tags.map((tag) => (
                <a href={`/tags/${tag}/`} class="tag">{tag}</a>
              ))}
            </div>
          )
        }
      </header>

      <div class="content">
        <Content />
      </div>

      {
        (prevPost || nextPost) && (
          <nav class="post-nav" aria-label="Post navigation">
            {prevPost ? (
              <a href={`/blog/${prevPost.slug}/`} class="prev">
                <span class="label">← Older</span>
                <span class="title">{prevPost.data.title}</span>
              </a>
            ) : (
              <div />
            )}
            {nextPost ? (
              <a href={`/blog/${nextPost.slug}/`} class="next">
                <span class="label">Newer →</span>
                <span class="title">{nextPost.data.title}</span>
              </a>
            ) : (
              <div />
            )}
          </nav>
        )
      }
    </article>
  </main>
</Layout>

<style>
  header {
    margin-bottom: 2rem;
  }

  time {
    font-size: 0.875rem;
    color: #666;
    display: block;
    margin-bottom: 0.5rem;
  }

  h1 {
    line-height: 1.3;
  }

  .description {
    font-size: 1.125rem;
    color: #666;
    margin: 0 0 0.5rem 0;
    line-height: 1.5;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-top: 0.5rem;
  }

  .post-nav {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid #ddd;
    font-size: 0.875rem;
  }

  .post-nav a {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    text-decoration: none;
    color: #0066cc;
  }

  .post-nav a:hover {
    text-decoration: underline;
  }

  .post-nav .next {
    text-align: right;
  }

  .post-nav .label {
    color: #666;
  }

  .post-nav .title {
    font-weight: 600;
  }

  @media (max-width: 640px) {
    .post-nav {
      flex-direction: column;
      gap: 1rem;
    }

    .post-nav .next {
      text-align: left;
    }
  }
</style>
